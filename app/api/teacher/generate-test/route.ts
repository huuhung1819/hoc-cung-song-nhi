import { NextRequest, NextResponse } from 'next/server'
import { requireTeacherOrAdmin } from '@/lib/apiAuth'

export async function POST(req: NextRequest) {
  // Guard: only teacher/admin
  const authError = await requireTeacherOrAdmin(req)
  if (authError) return authError
  try {
    const { 
      subject, 
      grade, 
      testType, // '15min', '45min', '90min', 'semester'
      topic,
      difficulty,
      count 
    } = await req.json()
    
    if (!subject || !grade || !testType) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Sanitize API key
    const apiKey = (process.env.OPENAI_API_KEY || '').replace(/\r?\n|\r|\s/g, '')

    if (!apiKey || apiKey.length < 10) {
      return NextResponse.json(
        { error: 'AI service is not configured' },
        { status: 500 }
      )
    }

    const testCount = count || getDefaultCount(testType)
    const prompt = createTestPrompt(subject, grade, topic || '', testType, difficulty, testCount)

    // Call OpenAI API
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `B·∫°n l√† m·ªôt gi√°o vi√™n gi√†u kinh nghi·ªám chuy√™n bi√™n so·∫°n ƒë·ªÅ thi theo ch∆∞∆°ng tr√¨nh B·ªô GD&ƒêT Vi·ªát Nam. B·∫°n t·∫°o ra c√°c ƒë·ªÅ thi ch·∫•t l∆∞·ª£ng cao, ph√π h·ª£p v·ªõi th·ªùi gian v√† y√™u c·∫ßu ki·ªÉm tra.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 4000,
      })
    })

    if (!openaiResponse.ok) {
      const errorData = await openaiResponse.json()
      console.error('OpenAI API error:', errorData)
      throw new Error('Failed to generate test')
    }

    const completion = await openaiResponse.json()
    const testContent = completion.choices[0]?.message?.content || ''

    const testData = parseTest(testContent, testType, testCount)

    return NextResponse.json({
      success: true,
      test: testData,
      metadata: {
        subject,
        grade,
        testType,
        topic,
        difficulty,
        count: testData.questions.length,
        duration: getDuration(testType),
        totalPoints: testData.totalPoints,
        generatedAt: new Date().toISOString()
      }
    })

  } catch (error: any) {
    console.error('Error generating test:', error.message)
    return NextResponse.json(
      { error: 'Failed to generate test' },
      { status: 500 }
    )
  }
}

function getDefaultCount(testType: string): number {
  const counts = {
    '15min': 10,
    '45min': 20,
    '90min': 30,
    'semester': 40
  }
  return counts[testType as keyof typeof counts] || 20
}

function getDuration(testType: string): string {
  const durations = {
    '15min': '15 ph√∫t',
    '45min': '1 ti·∫øt (45 ph√∫t)',
    '90min': '2 ti·∫øt (90 ph√∫t)',
    'semester': '3 ti·∫øt (135 ph√∫t)'
  }
  return durations[testType as keyof typeof durations] || '45 ph√∫t'
}

function createTestPrompt(
  subject: string,
  grade: string,
  topic: string,
  testType: string,
  difficulty: string,
  count: number
): string {
  const duration = getDuration(testType)
  const difficultyText = {
    'easy': 'd·ªÖ (c∆° b·∫£n)',
    'medium': 'trung b√¨nh',
    'hard': 'kh√≥ (n√¢ng cao)'
  }[difficulty] || 'trung b√¨nh'

  let typeInstruction = ''
  
  if (testType === '15min') {
    typeInstruction = `
T·∫°o ƒë·ªÅ ki·ªÉm tra 15 ph√∫t g·ªìm ${count} c√¢u h·ªèi.

Format:
---
**ƒê·ªÄ KI·ªÇM TRA 15 PH√öT**
**M√¥n:** ${subject} - **L·ªõp:** ${grade}
**Th·ªùi gian:** 15 ph√∫t
**ƒêi·ªÉm t·ªëi ƒëa:** 10 ƒëi·ªÉm

**C√¢u h·ªèi:**
[${count} c√¢u h·ªèi tr·∫Øc nghi·ªám 4 ƒë√°p √°n A, B, C, D]

**ƒê√ÅP √ÅN:**
[Danh s√°ch ƒë√°p √°n ƒë√∫ng theo th·ª© t·ª± c√¢u h·ªèi]
---`
  } else if (testType === '45min') {
    typeInstruction = `
T·∫°o ƒë·ªÅ ki·ªÉm tra 1 ti·∫øt (45 ph√∫t) g·ªìm ${count} c√¢u h·ªèi.

Format:
---
**ƒê·ªÄ KI·ªÇM TRA 1 TI·∫æT**
**M√¥n:** ${subject} - **L·ªõp:** ${grade}
**Th·ªùi gian:** 45 ph√∫t
**ƒêi·ªÉm t·ªëi ƒëa:** 10 ƒëi·ªÉm

**I. TR·∫ÆC NGHI·ªÜM (4 ƒëi·ªÉm)**
[8 c√¢u h·ªèi tr·∫Øc nghi·ªám 4 ƒë√°p √°n A, B, C, D]

**II. T·ª∞ LU·∫¨N (6 ƒëi·ªÉm)**
[${count - 8} c√¢u h·ªèi t·ª± lu·∫≠n v·ªõi ƒëi·ªÉm s·ªë chi ti·∫øt]

**ƒê√ÅP √ÅN:**
[ƒê√°p √°n chi ti·∫øt cho t·∫•t c·∫£ c√¢u h·ªèi]
---`
  } else if (testType === '90min') {
    typeInstruction = `
T·∫°o ƒë·ªÅ ki·ªÉm tra 2 ti·∫øt (90 ph√∫t) g·ªìm ${count} c√¢u h·ªèi.

Format:
---
**ƒê·ªÄ KI·ªÇM TRA 2 TI·∫æT**
**M√¥n:** ${subject} - **L·ªõp:** ${grade}
**Th·ªùi gian:** 90 ph√∫t
**ƒêi·ªÉm t·ªëi ƒëa:** 10 ƒëi·ªÉm

**I. TR·∫ÆC NGHI·ªÜM (3 ƒëi·ªÉm)**
[12 c√¢u h·ªèi tr·∫Øc nghi·ªám 4 ƒë√°p √°n A, B, C, D]

**II. T·ª∞ LU·∫¨N (7 ƒëi·ªÉm)**
[${count - 12} c√¢u h·ªèi t·ª± lu·∫≠n v·ªõi ƒëi·ªÉm s·ªë chi ti·∫øt]

**ƒê√ÅP √ÅN:**
[ƒê√°p √°n chi ti·∫øt cho t·∫•t c·∫£ c√¢u h·ªèi]
---`
  } else if (testType === 'semester') {
    typeInstruction = `
T·∫°o ƒë·ªÅ thi h·ªçc k·ª≥ g·ªìm ${count} c√¢u h·ªèi.

Format:
---
**ƒê·ªÄ THI H·ªåC K·ª≤**
**M√¥n:** ${subject} - **L·ªõp:** ${grade}
**Th·ªùi gian:** 135 ph√∫t
**ƒêi·ªÉm t·ªëi ƒëa:** 10 ƒëi·ªÉm

**I. TR·∫ÆC NGHI·ªÜM (3 ƒëi·ªÉm)**
[15 c√¢u h·ªèi tr·∫Øc nghi·ªám 4 ƒë√°p √°n A, B, C, D]

**II. T·ª∞ LU·∫¨N (7 ƒëi·ªÉm)**
[${count - 15} c√¢u h·ªèi t·ª± lu·∫≠n v·ªõi ƒëi·ªÉm s·ªë chi ti·∫øt]

**ƒê√ÅP √ÅN:**
[ƒê√°p √°n chi ti·∫øt cho t·∫•t c·∫£ c√¢u h·ªèi]
---`
  }

  return `T·∫°o ƒë·ªÅ ki·ªÉm tra m√¥n ${subject} cho h·ªçc sinh ${grade} v·ªÅ ch·ªß ƒë·ªÅ "${topic}".
Lo·∫°i ki·ªÉm tra: ${testType} (${duration})
ƒê·ªô kh√≥: ${difficultyText}
S·ªë c√¢u h·ªèi: ${count} c√¢u

${typeInstruction}

Y√™u c·∫ßu:
- N·ªôi dung ch√≠nh x√°c, ph√π h·ª£p v·ªõi ch∆∞∆°ng tr√¨nh ${grade}
- C√¢u h·ªèi r√µ r√†ng, kh√¥ng g√¢y nh·∫ßm l·∫´n
- Ph√¢n b·ªë ƒëi·ªÉm h·ª£p l√Ω theo y√™u c·∫ßu t·ª´ng lo·∫°i ki·ªÉm tra
- ƒê√°p √°n ch√≠nh x√°c v√† c√≥ gi·∫£i th√≠ch chi ti·∫øt
- Ng√¥n ng·ªØ ph√π h·ª£p v·ªõi l·ª©a tu·ªïi
- C√≥ gi√° tr·ªã ƒë√°nh gi√° h·ªçc t·∫≠p cao
- Ph√π h·ª£p v·ªõi th·ªùi gian l√†m b√†i`
}

function parseTest(content: string, testType: string, count: number): any {
  try {
    console.log('üìù Parsing test content, length:', content.length)
    
    const sections = content.split('---')
    const testSection = sections[0] || content
    
    const questions: any[] = []
    let answers: string[] = []
    let totalPoints = 10

  // Extract questions
  const questionMatches = testSection.match(/\*\*C√¢u \d+:\*\*\s*(.+?)(?=\n\*\*C√¢u \d+:|$)/)
  
  if (questionMatches) {
    questionMatches.forEach((match, index) => {
      const questionText = match.replace(/\*\*C√¢u \d+:\*\*\s*/, '').trim()
      
      if (testType === '15min') {
        // Multiple choice questions
        const options = match.match(/[A-D]\.\s*(.+?)(?=\n[A-D]\.|$)/g)
        if (options) {
          questions.push({
            id: index + 1,
            type: 'multiple_choice',
            question: questionText,
            options: options.map(opt => opt.replace(/^[A-D]\.\s*/, '').trim()),
            points: 1
          })
        }
      } else {
        // Mixed questions
        if (match.includes('A.') && match.includes('B.') && match.includes('C.') && match.includes('D.')) {
          // Multiple choice
          const options = match.match(/[A-D]\.\s*(.+?)(?=\n[A-D]\.|$)/g)
          if (options) {
            questions.push({
              id: index + 1,
              type: 'multiple_choice',
              question: questionText,
              options: options.map(opt => opt.replace(/^[A-D]\.\s*/, '').trim()),
              points: index < 8 ? 0.5 : 0.25 // Different point distribution
            })
          }
        } else {
          // Essay question
          questions.push({
            id: index + 1,
            type: 'essay',
            question: questionText,
            points: index < 8 ? 2 : 1.5
          })
        }
      }
    })
  }

  // Extract answers
  const answerMatch = testSection.match(/\*\*ƒê√ÅP √ÅN:\*\*\s*(.+?)(?=\*\*|$)/s)
  if (answerMatch) {
    answers = answerMatch[1].trim().split('\n').filter(line => line.trim())
  }

  return {
    title: `ƒê·ªÅ ki·ªÉm tra - ${testType}`,
    testType,
    duration: getDuration(testType),
    questions,
    answers,
    totalPoints,
    instructions: getInstructions(testType)
  }
  } catch (error) {
    console.error('üìù Error in parseTest:', error)
    return {
      title: `ƒê·ªÅ ki·ªÉm tra - ${testType}`,
      testType,
      duration: getDuration(testType),
      questions: [],
      answers: [],
      totalPoints: 10,
      instructions: getInstructions(testType)
    }
  }
}

function getInstructions(testType: string): string {
  const instructions = {
    '15min': 'L√†m b√†i trong 15 ph√∫t. Ch·ªçn ƒë√°p √°n ƒë√∫ng nh·∫•t cho m·ªói c√¢u h·ªèi.',
    '45min': 'L√†m b√†i trong 45 ph√∫t. Ph·∫ßn tr·∫Øc nghi·ªám: ch·ªçn ƒë√°p √°n ƒë√∫ng. Ph·∫ßn t·ª± lu·∫≠n: tr√¨nh b√†y r√µ r√†ng, ƒë·∫ßy ƒë·ªß.',
    '90min': 'L√†m b√†i trong 90 ph√∫t. Ph·∫ßn tr·∫Øc nghi·ªám: ch·ªçn ƒë√°p √°n ƒë√∫ng. Ph·∫ßn t·ª± lu·∫≠n: tr√¨nh b√†y chi ti·∫øt, c√≥ gi·∫£i th√≠ch.',
    'semester': 'L√†m b√†i trong 135 ph√∫t. ƒê√¢y l√† ƒë·ªÅ thi h·ªçc k·ª≥, c·∫ßn l√†m c·∫©n th·∫≠n v√† ki·ªÉm tra k·ªπ tr∆∞·ªõc khi n·ªôp b√†i.'
  }
  return instructions[testType as keyof typeof instructions] || ''
}

