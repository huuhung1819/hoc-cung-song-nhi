'use client'

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { MessageCircle, Phone, Mail, Clock, CheckCircle } from 'lucide-react'

export default function SupportPage() {
  const [formData, setFormData] = useState({
    subject: '',
    message: '',
    priority: 'medium',
    category: 'general'
  })

  const [isSubmitted, setIsSubmitted] = useState(false)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // Submit form logic here
    setIsSubmitted(true)
    setTimeout(() => setIsSubmitted(false), 3000)
  }

  const faqs = [
    {
      question: 'L√†m th·∫ø n√†o ƒë·ªÉ s·ª≠ d·ª•ng AI h·ªçc t·∫≠p?',
      answer: 'B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu b·∫±ng c√°ch ch·ªçn m·ªôt b√†i h·ªçc t·ª´ trang B√†i h·ªçc, sau ƒë√≥ s·ª≠ d·ª•ng t√≠nh nƒÉng Chat ƒë·ªÉ ƒë·∫∑t c√¢u h·ªèi v·ªõi AI gi√°o vi√™n.'
    },
    {
      question: 'Token ƒë∆∞·ª£c t√≠nh nh∆∞ th·∫ø n√†o?',
      answer: 'M·ªói c√¢u h·ªèi g·ª≠i ƒë·∫øn AI s·∫Ω ti√™u t·ªën m·ªôt l∆∞·ª£ng token nh·∫•t ƒë·ªãnh. Token s·∫Ω ƒë∆∞·ª£c reset v·ªÅ 0 m·ªói ng√†y theo g√≥i ƒëƒÉng k√Ω c·ªßa b·∫°n.'
    },
    {
      question: 'L√†m sao ƒë·ªÉ n√¢ng c·∫•p g√≥i h·ªçc?',
      answer: 'B·∫°n c√≥ th·ªÉ n√¢ng c·∫•p g√≥i h·ªçc t·ª´ trang T√†i kho·∫£n. Ch·ªçn "N√¢ng c·∫•p g√≥i" v√† l√†m theo h∆∞·ªõng d·∫´n thanh to√°n.'
    },
    {
      question: 'T√¥i qu√™n m·∫≠t kh·∫©u th√¨ l√†m sao?',
      answer: 'T·∫°i trang ƒëƒÉng nh·∫≠p, nh·∫•n "Qu√™n m·∫≠t kh·∫©u" v√† nh·∫≠p email c·ªßa b·∫°n. Ch√∫ng t√¥i s·∫Ω g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.'
    },
    {
      question: 'C√≥ th·ªÉ s·ª≠ d·ª•ng tr√™n ƒëi·ªán tho·∫°i kh√¥ng?',
      answer: 'C√≥, ·ª©ng d·ª•ng ƒë∆∞·ª£c t·ªëi ∆∞u cho c·∫£ m√°y t√≠nh v√† ƒëi·ªán tho·∫°i. B·∫°n c√≥ th·ªÉ truy c·∫≠p t·ª´ b·∫•t k·ª≥ tr√¨nh duy·ªát n√†o.'
    }
  ]

  const contactMethods = [
    {
      icon: Phone,
      title: 'ƒêi·ªán tho·∫°i',
      description: 'G·ªçi tr·ª±c ti·∫øp ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh nh·∫•t',
      contact: '1900-xxxx',
      available: '8:00 - 22:00 h√†ng ng√†y'
    },
    {
      icon: Mail,
      title: 'Email',
      description: 'G·ª≠i email v√† nh·∫≠n ph·∫£n h·ªìi trong 24h',
      contact: 'support@ailearning.com',
      available: '24/7'
    },
    {
      icon: MessageCircle,
      title: 'Chat tr·ª±c tuy·∫øn',
      description: 'Chat v·ªõi nh√¢n vi√™n h·ªó tr·ª£ ngay l·∫≠p t·ª©c',
      contact: 'B·∫Øt ƒë·∫ßu chat',
      available: '8:00 - 22:00 h√†ng ng√†y'
    }
  ]

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-3xl font-bold text-gray-900">H·ªó tr·ª£</h1>
        <p className="text-gray-600 mt-1">
          Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n
        </p>
      </div>

      {/* Contact Methods */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {contactMethods.map((method, index) => {
          const Icon = method.icon
          return (
            <Card key={index} className="hover:shadow-md transition-shadow">
              <CardHeader>
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-blue-100 rounded-lg">
                    <Icon className="w-5 h-5 text-blue-600" />
                  </div>
                  <div>
                    <CardTitle className="text-lg">{method.title}</CardTitle>
                    <p className="text-sm text-gray-600">{method.description}</p>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="font-medium">{method.contact}</div>
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Clock className="w-4 h-4" />
                    {method.available}
                  </div>
                </div>
              </CardContent>
            </Card>
          )
        })}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Contact Form */}
        <Card>
          <CardHeader>
            <CardTitle>G·ª≠i y√™u c·∫ßu h·ªó tr·ª£</CardTitle>
            <CardDescription>
              M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n ƒëang g·∫∑p ph·∫£i
            </CardDescription>
          </CardHeader>
          <CardContent>
            {isSubmitted ? (
              <div className="text-center py-8">
                <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-green-600 mb-2">
                  Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c g·ª≠i!
                </h3>
                <p className="text-gray-600">
                  Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù
                </p>
              </div>
            ) : (
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <Label htmlFor="category">Danh m·ª•c</Label>
                  <select
                    id="category"
                    value={formData.category}
                    onChange={(e) => setFormData({...formData, category: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="general">Chung</option>
                    <option value="technical">K·ªπ thu·∫≠t</option>
                    <option value="billing">Thanh to√°n</option>
                    <option value="feature">T√≠nh nƒÉng</option>
                    <option value="other">Kh√°c</option>
                  </select>
                </div>

                <div>
                  <Label htmlFor="priority">M·ª©c ƒë·ªô ∆∞u ti√™n</Label>
                  <select
                    id="priority"
                    value={formData.priority}
                    onChange={(e) => setFormData({...formData, priority: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="low">Th·∫•p</option>
                    <option value="medium">Trung b√¨nh</option>
                    <option value="high">Cao</option>
                    <option value="urgent">Kh·∫©n c·∫•p</option>
                  </select>
                </div>

                <div>
                  <Label htmlFor="subject">Ti√™u ƒë·ªÅ</Label>
                  <Input
                    id="subject"
                    value={formData.subject}
                    onChange={(e) => setFormData({...formData, subject: e.target.value})}
                    placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·∫•n ƒë·ªÅ"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="message">Chi ti·∫øt</Label>
                  <Textarea
                    id="message"
                    value={formData.message}
                    onChange={(e) => setFormData({...formData, message: e.target.value})}
                    placeholder="M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n ƒëang g·∫∑p ph·∫£i..."
                    rows={6}
                    required
                  />
                </div>

                <Button type="submit" className="w-full">
                  G·ª≠i y√™u c·∫ßu h·ªó tr·ª£
                </Button>
              </form>
            )}
          </CardContent>
        </Card>

        {/* FAQ */}
        <Card>
          <CardHeader>
            <CardTitle>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</CardTitle>
            <CardDescription>
              T√¨m c√¢u tr·∫£ l·ªùi cho c√°c c√¢u h·ªèi ph·ªï bi·∫øn
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {faqs.map((faq, index) => (
                <div key={index} className="border-b border-gray-200 pb-4 last:border-b-0">
                  <h4 className="font-semibold text-gray-900 mb-2">
                    {faq.question}
                  </h4>
                  <p className="text-sm text-gray-600">
                    {faq.answer}
                  </p>
                </div>
              ))}
            </div>
            
            <div className="mt-6 text-center">
              <Button variant="outline">
                Xem th√™m c√¢u h·ªèi
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Quick Help */}
      <Card>
        <CardHeader>
          <CardTitle>Tr·ª£ gi√∫p nhanh</CardTitle>
          <CardDescription>
            C√°c t√†i li·ªáu h∆∞·ªõng d·∫´n v√† video tutorial
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Button variant="outline" className="h-20 flex flex-col gap-2">
              <div className="text-2xl">üìñ</div>
              <span className="text-sm">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</span>
            </Button>
            <Button variant="outline" className="h-20 flex flex-col gap-2">
              <div className="text-2xl">üé•</div>
              <span className="text-sm">Video tutorial</span>
            </Button>
            <Button variant="outline" className="h-20 flex flex-col gap-2">
              <div className="text-2xl">üí°</div>
              <span className="text-sm">M·∫πo h·ªçc hi·ªáu qu·∫£</span>
            </Button>
            <Button variant="outline" className="h-20 flex flex-col gap-2">
              <div className="text-2xl">üîß</div>
              <span className="text-sm">Kh·∫Øc ph·ª•c s·ª± c·ªë</span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
