import { createClient } from '@/lib/supabaseServer'

// Custom email template for OTP
const createOTPEmailTemplate = (email: string, otp: string) => {
  return {
    to: email,
    subject: `M√£ x√°c th·ª±c ƒë·ªïi m√£ m·ªü kh√≥a - ${otp}`,
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
          <h1 style="margin: 0; font-size: 24px;">üîê AI Learning Platform</h1>
          <p style="margin: 10px 0 0 0; opacity: 0.9;">M√£ x√°c th·ª±c ƒë·ªïi m√£ m·ªü kh√≥a</p>
        </div>
        
        <div style="background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; border: 1px solid #e9ecef;">
          <h2 style="color: #333; margin-top: 0;">Xin ch√†o!</h2>
          
          <p style="color: #666; line-height: 1.6;">
            B·∫°n ƒë√£ y√™u c·∫ßu ƒë·ªïi m√£ m·ªü kh√≥a m·ªõi cho t√†i kho·∫£n h·ªçc t·∫≠p c·ªßa con.
          </p>
          
          <div style="background: white; border: 2px solid #667eea; border-radius: 8px; padding: 20px; text-align: center; margin: 20px 0;">
            <p style="margin: 0; color: #666; font-size: 14px;">M√£ x√°c th·ª±c c·ªßa b·∫°n l√†:</p>
            <div style="font-size: 32px; font-weight: bold; color: #667eea; letter-spacing: 8px; margin: 10px 0;">${otp}</div>
          </div>
          
          <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 15px; margin: 20px 0;">
            <p style="margin: 0; color: #856404; font-size: 14px;">
              <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>
            </p>
            <ul style="margin: 10px 0 0 0; color: #856404; font-size: 14px; padding-left: 20px;">
              <li>M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong></li>
              <li>Ch·ªâ s·ª≠ d·ª•ng <strong>1 l·∫ßn</strong> ƒë·ªÉ ƒë·ªïi m√£ m·ªü kh√≥a</li>
              <li>N·∫øu kh√¥ng ph·∫£i b·∫°n y√™u c·∫ßu, vui l√≤ng <strong>b·ªè qua email n√†y</strong></li>
              <li>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi ai kh√°c</li>
            </ul>
          </div>
          
          <p style="color: #666; font-size: 14px; margin-bottom: 0;">
            Tr√¢n tr·ªçng,<br>
            <strong>AI Learning Team</strong>
          </p>
        </div>
        
        <div style="text-align: center; margin-top: 20px;">
          <p style="color: #999; font-size: 12px;">
            Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
          </p>
        </div>
      </div>
    `,
    text: `
M√£ x√°c th·ª±c ƒë·ªïi m√£ m·ªü kh√≥a - ${otp}

Xin ch√†o!

B·∫°n ƒë√£ y√™u c·∫ßu ƒë·ªïi m√£ m·ªü kh√≥a m·ªõi cho t√†i kho·∫£n h·ªçc t·∫≠p c·ªßa con.

M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: ${otp}

‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:
- M√£ n√†y c√≥ hi·ªáu l·ª±c trong 10 ph√∫t
- Ch·ªâ s·ª≠ d·ª•ng 1 l·∫ßn ƒë·ªÉ ƒë·ªïi m√£ m·ªü kh√≥a
- N·∫øu kh√¥ng ph·∫£i b·∫°n y√™u c·∫ßu, vui l√≤ng b·ªè qua email n√†y
- Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi ai kh√°c

Tr√¢n tr·ªçng,
AI Learning Team
    `
  }
}

// Send OTP email using Supabase custom SMTP
export const sendOTPEmail = async (email: string, otp: string) => {
  try {
    const supabase = createClient()
    
    // Use Supabase Edge Function to send custom email
    const { data, error } = await supabase.functions.invoke('send-email', {
      body: createOTPEmailTemplate(email, otp)
    })

    if (error) {
      console.error('Supabase email error:', error)
      
      // Fallback: Try using Supabase's built-in email service
      console.log('Falling back to built-in Supabase email service...')
      const fallbackResult = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/auth/callback?type=otp&code=${otp}`
      } as any)
      
      if (fallbackResult.error) {
        console.error('Fallback email error:', fallbackResult.error)
        return { success: false, error: fallbackResult.error.message }
      }
      
      console.log('‚úÖ Fallback Supabase email sent successfully to:', email)
      return { success: true, data: fallbackResult.data }
    }

    console.log('‚úÖ Supabase custom email sent successfully to:', email)
    return { success: true, data }
    
  } catch (error) {
    console.error('Error sending Supabase email:', error)
    return { success: false, error: (error as Error).message }
  }
}
