/**
 * Execute script v2: X√ìA users KH√îNG ph·∫£i admin/teacher
 * X·ª≠ l√Ω ƒë·∫ßy ƒë·ªß FK constraints
 * ‚ö†Ô∏è KH√îNG TH·ªÇ HO√ÄN T√ÅC
 */

require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Thi·∫øu SUPABASE_URL ho·∫∑c SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function deleteNonAdminTeacherUsers() {
  console.log('üöÄ B·∫ÆT ƒê·∫¶U X√ìA USERS...\n')

  try {
    // Step 1: Get list of users to delete
    const { data: usersToDelete, error: fetchError } = await supabase
      .from('users')
      .select('id, name, email, role')
      .not('role', 'in', '("admin","teacher")')

    if (fetchError) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch users:', fetchError)
      return
    }

    console.log(`üìã T√¨m th·∫•y ${usersToDelete.length} users c·∫ßn x√≥a\n`)

    if (usersToDelete.length === 0) {
      console.log('‚úÖ Kh√¥ng c√≥ users n√†o c·∫ßn x√≥a')
      return
    }

    const userIds = usersToDelete.map(u => u.id)

    // Step 2: Delete related data in correct order
    console.log('üóëÔ∏è  ƒêang x√≥a d·ªØ li·ªáu li√™n quan...\n')

    // 2.1: Delete student_assignments first (child of assignments)
    console.log('   X√≥a student_assignments...')
    const { error: studentAssignError } = await supabase
      .from('student_assignments')
      .delete()
      .in('student_id', userIds)
    
    if (studentAssignError) {
      console.warn('   ‚ö†Ô∏è  L·ªói:', studentAssignError.message)
    } else {
      console.log('   ‚úÖ ƒê√£ x√≥a student_assignments')
    }

    // 2.2: Delete assignments where teacher is being deleted
    console.log('   X√≥a assignments (teacher_id)...')
    const { error: assignError } = await supabase
      .from('assignments')
      .delete()
      .in('teacher_id', userIds)
    
    if (assignError) {
      console.warn('   ‚ö†Ô∏è  L·ªói:', assignError.message)
    } else {
      console.log('   ‚úÖ ƒê√£ x√≥a assignments')
    }

    // 2.3: Delete conversations
    console.log('   X√≥a conversations...')
    const { error: convError } = await supabase
      .from('conversations')
      .delete()
      .in('user_id', userIds)
    
    if (convError) {
      console.warn('   ‚ö†Ô∏è  L·ªói:', convError.message)
    } else {
      console.log('   ‚úÖ ƒê√£ x√≥a conversations')
    }

    // 2.4: Delete notifications
    console.log('   X√≥a notifications...')
    const { error: notifError } = await supabase
      .from('notifications')
      .delete()
      .in('user_id', userIds)
    
    if (notifError) {
      console.warn('   ‚ö†Ô∏è  L·ªói:', notifError.message)
    } else {
      console.log('   ‚úÖ ƒê√£ x√≥a notifications')
    }

    // 2.5: Delete payment_requests
    console.log('   X√≥a payment_requests...')
    const { error: paymentError } = await supabase
      .from('payment_requests')
      .delete()
      .in('user_id', userIds)
    
    if (paymentError) {
      console.warn('   ‚ö†Ô∏è  L·ªói:', paymentError.message)
    } else {
      console.log('   ‚úÖ ƒê√£ x√≥a payment_requests')
    }

    // 2.6: Delete teacher_students relationships
    console.log('   X√≥a teacher_students (student_id)...')
    const { error: tsError } = await supabase
      .from('teacher_students')
      .delete()
      .in('student_id', userIds)
    
    if (tsError) {
      console.warn('   ‚ö†Ô∏è  L·ªói:', tsError.message)
    } else {
      console.log('   ‚úÖ ƒê√£ x√≥a teacher_students')
    }

    // Step 3: Delete users
    console.log('\nüóëÔ∏è  ƒêang x√≥a users t·ª´ b·∫£ng users...')
    
    const { error: deleteError } = await supabase
      .from('users')
      .delete()
      .not('role', 'in', '("admin","teacher")')

    if (deleteError) {
      console.error('‚ùå L·ªói khi x√≥a users:', deleteError)
      return
    }

    console.log(`‚úÖ ƒê√É X√ìA TH√ÄNH C√îNG ${usersToDelete.length} USERS!\n`)

    // Step 4: Verify
    const { data: remainingUsers, error: verifyError } = await supabase
      .from('users')
      .select('id, name, email, role')
      .order('role', { ascending: true })

    if (!verifyError && remainingUsers) {
      console.log('üìä USERS C√íN L·∫†I:')
      console.log(`   T·ªïng: ${remainingUsers.length}\n`)
      
      const admins = remainingUsers.filter(u => u.role === 'admin')
      const teachers = remainingUsers.filter(u => u.role === 'teacher')
      
      console.log(`   ‚úÖ Admin: ${admins.length}`)
      admins.forEach(u => console.log(`      - ${u.name} (${u.email})`))
      
      console.log(`\n   ‚úÖ Teacher: ${teachers.length}`)
      teachers.forEach(u => console.log(`      - ${u.name} (${u.email})`))
    }

  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error)
  }
}

deleteNonAdminTeacherUsers()
  .then(() => {
    console.log('\n‚úÖ Ho√†n t·∫•t!')
    process.exit(0)
  })
  .catch(error => {
    console.error('‚ùå L·ªói:', error)
    process.exit(1)
  })

